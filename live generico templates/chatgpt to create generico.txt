
Best used with Moodle4.1 - SQL / development GPT
# üß∞ Moodle 4.1 ‚Äî Reusable Prompt for GPT: Generico SQL Template Design

This prompt is designed for use with ChatGPT (custom GPTs or base model) to help develop and improve **Generico filter templates** in **Moodle 4.1**, especially those using SQL lookups in the `dataset` area.

It incorporates **best practices**, **limitations of the Generico filter**, and insights from the official documentation.

---

## üìñ Reference

- **Official Docs**: [Generico Filter for Moodle](https://docs.moodle.org/31/en/filter_generico)  
- While written for Moodle 3.1, the plugin‚Äôs core features are compatible with Moodle 4.1.

---

## üîç Prompt Overview

> I am building **Generico Filter templates** in **Moodle 4.1** that use SQL via the `dataset` field. These templates dynamically insert content using placeholders like `@@USER:id@@` and SQL lookups based on user profile fields or custom parameters.  
>
> Please help me analyze, build, or improve Generico template JSON blocks that:
>
> - Use `dataset` SQL to return a result based on user input or context
> - Ensure a **single row is always returned**
> - Avoid SQL reserved or restricted aliases like `rows`
> - Use fallback mechanisms when no data is matched
> - Follow **Moodle UX and Bootstrap 4 UI guidelines**
> - Reference and use supported system variables

---

## ‚úÖ Requirements and Best Practices

### 1. `dataset` SQL Queries

- **Must return exactly one row** ‚Äî otherwise all `@@DATASET:...@@` values fail silently.
- If no matching record exists, you **must still return one fallback row** using:
  - `UNION ALL` with a fallback row
  - Proper **wrapping of the full query in parentheses**
  - No trailing `;` (semicolon) in the query string

#### ‚úÖ MariaDB-Compatible SQL Structure (Safe for Generico)

```sql
(SELECT linkout
 FROM (
   (
     SELECT dc2.content AS linkout
     FROM mdl_data_content dc1
     JOIN mdl_data_content dc2 ON dc1.recordid = dc2.recordid
     JOIN mdl_data_fields df1 ON dc1.fieldid = df1.id
     JOIN mdl_data_fields df2 ON dc2.fieldid = df2.id
     JOIN mdl_data_records dr ON dc1.recordid = dr.id
     JOIN mdl_user u ON u.id = ?
     WHERE dr.dataid = ?
       AND df1.name = 'pathway'
       AND df2.name = 'link'
       AND dc1.content = u.department
     LIMIT 1
   )
   UNION ALL
   (
     SELECT '# No link found' AS linkout
     FROM DUAL
     WHERE NOT EXISTS (
       SELECT 1
       FROM mdl_data_content dc
       JOIN mdl_data_fields df ON dc.fieldid = df.id
       JOIN mdl_user u ON u.id = ?
       WHERE df.name = 'pathway'
         AND dc.content = u.department
     )
   )
 ) AS final
 LIMIT 1)
```

### ‚ö†Ô∏è Important Notes

- Always wrap the **entire `UNION` block** in an outer `SELECT` for MariaDB compatibility.
- Never end the query with a **semicolon (;)** inside the `dataset` field ‚Äî it will break parsing.
- The alias (`linkout`) must be used consistently and **cannot be `content`, `row`, `count`, etc.** ‚Äî those are reserved.

---

### 2. Reserved Words

Avoid aliases like `rows`, `row`, `count`, or `content`. Instead, use:

```sql
AS linkout, datasetval, outputval, resulttext
```

---

### 3. `datasetvars`

Define all placeholders used in SQL `?` markers. These are substituted by Generico. Common ones:

```text
@@USER:id@@
@@USER:email@@
@@COURSE:fullname@@
@@database@@
@@customparam1@@
```

**Order matters** ‚Äî match the `?` markers in your SQL.

Example:

```json
"datasetvars": "@@USER:id@@,@@database@@,@@USER:id@@"
```

---

### 4. Output (`body`)

Use Moodle Bootstrap 4 styles for buttons or badges:

```html
<a href="@@DATASET:linkout@@" class="btn btn-outline-secondary btn-sm text-nowrap" target="_blank" rel="noopener noreferrer">@@linktext@@</a>
```

---

### 5. Fallbacks

Use a dummy value like:

- `'# No link found'`
- `'javascript:void(0)'`
- `'#'`

To ensure a row is always returned.

---

## üí° Common Use Case Example

> Create a button that links the user to a department-specific URL stored in a database activity. The user‚Äôs department is matched to the `pathway` field. The `link` field is returned. If no match, a fallback URL is shown.

### ‚úÖ Template JSON (Safe for MariaDB)

```json
{
  "key": "insertlink",
  "name": "Insert link based on profile field",
  "instructions": "{GENERICO:type=insertlink,database=2,linktext=\"Go to your department site\"}",
  "body": "<div>\n  <a href=\"@@DATASET:linkout@@\" class=\"btn btn-outline-secondary btn-sm text-nowrap\" target=\"_blank\" rel=\"noopener noreferrer\">@@linktext@@</a>\n</div>",
  "dataset": "(SELECT linkout\n FROM (\n   (\n     SELECT dc2.content AS linkout\n     FROM mdl_data_content dc1\n     JOIN mdl_data_content dc2 ON dc1.recordid = dc2.recordid\n     JOIN mdl_data_fields df1 ON dc1.fieldid = df1.id\n     JOIN mdl_data_fields df2 ON dc2.fieldid = df2.id\n     JOIN mdl_data_records dr ON dc1.recordid = dr.id\n     JOIN mdl_user u ON u.id = ?\n     WHERE dr.dataid = ?\n       AND df1.name = 'pathway'\n       AND df2.name = 'link'\n       AND dc1.content = u.department\n     LIMIT 1\n   )\n   UNION ALL\n   (\n     SELECT '# No link found' AS linkout\n     FROM DUAL\n     WHERE NOT EXISTS (\n       SELECT 1\n       FROM mdl_data_content dc\n       JOIN mdl_data_fields df ON dc.fieldid = df.id\n       JOIN mdl_user u ON u.id = ?\n       WHERE df.name = 'pathway'\n         AND dc.content = u.department\n     )\n   )\n ) AS final\n LIMIT 1)",
  "datasetvars": "@@USER:id@@,@@database@@,@@USER:id@@"
}
```

---

## ‚úÖ Quick Checklist for Generico SQL Templates

| Item                           | ‚úÖ Required or Recommended
